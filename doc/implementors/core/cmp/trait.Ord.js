(function() {var implementors = {};
implementors["chrono"] = [{"text":"impl Ord for Duration","synthetic":false,"types":[]},{"text":"impl Ord for NaiveDate","synthetic":false,"types":[]},{"text":"impl Ord for NaiveDateTime","synthetic":false,"types":[]},{"text":"impl Ord for IsoWeek","synthetic":false,"types":[]},{"text":"impl Ord for NaiveTime","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Ord for Date&lt;Tz&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Ord for DateTime&lt;Tz&gt;","synthetic":false,"types":[]}];
implementors["errno"] = [{"text":"impl Ord for Errno","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Ord for Level","synthetic":false,"types":[]},{"text":"impl Ord for LevelFilter","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Ord for Metadata&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Ord for MetadataBuilder&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T:&nbsp;Clone + Integer&gt; Ord for Ratio&lt;T&gt;","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Ord for Ident","synthetic":false,"types":[]}];
implementors["r3"] = [{"text":"impl Ord for ResultCode","synthetic":false,"types":[]},{"text":"impl Ord for ActivateTaskError","synthetic":false,"types":[]},{"text":"impl Ord for GetCurrentTaskError","synthetic":false,"types":[]},{"text":"impl Ord for InterruptTaskError","synthetic":false,"types":[]},{"text":"impl Ord for SetTaskPriorityError","synthetic":false,"types":[]},{"text":"impl Ord for GetTaskPriorityError","synthetic":false,"types":[]},{"text":"impl Ord for ExitTaskError","synthetic":false,"types":[]},{"text":"impl Ord for CpuLockError","synthetic":false,"types":[]},{"text":"impl Ord for BoostPriorityError","synthetic":false,"types":[]},{"text":"impl Ord for TimeError","synthetic":false,"types":[]},{"text":"impl Ord for AdjustTimeError","synthetic":false,"types":[]},{"text":"impl Ord for WaitError","synthetic":false,"types":[]},{"text":"impl Ord for WaitTimeoutError","synthetic":false,"types":[]},{"text":"impl Ord for ParkError","synthetic":false,"types":[]},{"text":"impl Ord for ParkTimeoutError","synthetic":false,"types":[]},{"text":"impl Ord for UnparkError","synthetic":false,"types":[]},{"text":"impl Ord for UnparkExactError","synthetic":false,"types":[]},{"text":"impl Ord for SleepError","synthetic":false,"types":[]},{"text":"impl Ord for UpdateEventGroupError","synthetic":false,"types":[]},{"text":"impl Ord for GetEventGroupError","synthetic":false,"types":[]},{"text":"impl Ord for PollEventGroupError","synthetic":false,"types":[]},{"text":"impl Ord for WaitEventGroupError","synthetic":false,"types":[]},{"text":"impl Ord for WaitEventGroupTimeoutError","synthetic":false,"types":[]},{"text":"impl Ord for GetSemaphoreError","synthetic":false,"types":[]},{"text":"impl Ord for DrainSemaphoreError","synthetic":false,"types":[]},{"text":"impl Ord for SignalSemaphoreError","synthetic":false,"types":[]},{"text":"impl Ord for PollSemaphoreError","synthetic":false,"types":[]},{"text":"impl Ord for WaitSemaphoreError","synthetic":false,"types":[]},{"text":"impl Ord for WaitSemaphoreTimeoutError","synthetic":false,"types":[]},{"text":"impl Ord for QueryMutexError","synthetic":false,"types":[]},{"text":"impl Ord for UnlockMutexError","synthetic":false,"types":[]},{"text":"impl Ord for TryLockMutexError","synthetic":false,"types":[]},{"text":"impl Ord for LockMutexError","synthetic":false,"types":[]},{"text":"impl Ord for LockMutexTimeoutError","synthetic":false,"types":[]},{"text":"impl Ord for MarkConsistentMutexError","synthetic":false,"types":[]},{"text":"impl Ord for SetInterruptLinePriorityError","synthetic":false,"types":[]},{"text":"impl Ord for EnableInterruptLineError","synthetic":false,"types":[]},{"text":"impl Ord for PendInterruptLineError","synthetic":false,"types":[]},{"text":"impl Ord for ClearInterruptLineError","synthetic":false,"types":[]},{"text":"impl Ord for QueryInterruptLineError","synthetic":false,"types":[]},{"text":"impl Ord for StartTimerError","synthetic":false,"types":[]},{"text":"impl Ord for StopTimerError","synthetic":false,"types":[]},{"text":"impl Ord for SetTimerDelayError","synthetic":false,"types":[]},{"text":"impl Ord for SetTimerPeriodError","synthetic":false,"types":[]},{"text":"impl Ord for EventGroupWaitFlags","synthetic":false,"types":[]},{"text":"impl Ord for Duration","synthetic":false,"types":[]},{"text":"impl Ord for Time","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Ord for Span","synthetic":false,"types":[]},{"text":"impl Ord for Position","synthetic":false,"types":[]},{"text":"impl Ord for Literal","synthetic":false,"types":[]},{"text":"impl Ord for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl Ord for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl Ord for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Ord for Utf8Range","synthetic":false,"types":[]}];
implementors["staticvec"] = [{"text":"impl&lt;const N:&nbsp;usize&gt; Ord for StaticString&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Ord, const N:&nbsp;usize&gt; Ord for StaticVec&lt;T, N&gt;","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Ord for Lifetime","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()